
/**
 * Adds an automatically generated list of screen width
 * breakpoints to the $global-breakpoints map with:
 *
 *    from-breakpoint-a (as a min-width media query)
 *    upto-breakpoint-a (as a max-width media query)
 *
 *  ... and all possible combinations of:
 *
 *    from-breakpoint-a--upto-breakpoint-b (where breakpoint b > breakpoint a)
 *
 */

@function min-width($value) {
  @return '(min-width: ' + $value + ')';
}

@function max-width($value) {
  @return '(max-width: ' + ($value - 1px) + ')';
}

@function make-width-breakpoints($width-breakpoints) {

  $output-breakpoints: ();

  @each $bp-a-key, $bp-a-value in $width-breakpoints {

    $a: index(($width-breakpoints), ($bp-a-key $bp-a-value));

    $output-breakpoints: map-merge($output-breakpoints, (
      'upto-' + $bp-a-key:
      'screen and ' + max-width($bp-a-value)
    ));

    $output-breakpoints: map-merge($output-breakpoints, (
      'from-' + $bp-a-key:
      'screen and ' + min-width($bp-a-value)
    ));

    @each $bp-b-key, $bp-b-value in $width-breakpoints {

      $b: index(($width-breakpoints), ($bp-b-key $bp-b-value));

      @if $a != $b and $bp-b-value > $bp-a-value {
        $output-breakpoints: map-merge($output-breakpoints, (
          'from-' + $bp-a-key + '--upto-' + $bp-b-key:
          'screen and ' + min-width($bp-a-value) + ' and ' + max-width($bp-b-value)
        ));
      }

    }

  }

  @return $output-breakpoints;

}


/**
 * A breakpoint mixin.
 * Source: IotaCSS iota-breakpoint
 */

@mixin breakpoint($size, $breakpoints: $global-breakpoints) {
  $breakpoint-found: map-has-key($breakpoints, $size);

  @if ($breakpoint-found == true) {
    $breakpoint: map-get($breakpoints, $size);

    @media #{$breakpoint} {
      @content;
    }
  } @else {
    @warn 'Breakpoint size \'#{$size}\' doesn\'t exist.';
  }
}
